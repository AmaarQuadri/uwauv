
# UW Aquadrone: Please keep original author credited
# Felix Duvallet <felixd@gmail.com>

# Generic .travis.yml file for running continuous integration on Travis-CI for
# any ROS package.
#
# Available here:
#   - https://github.com/felixduvallet/ros-travis-integration
#
# This installs ROS on a clean Travis-CI virtual machine, creates a ROS
# workspace, resolves all listed dependencies, and sets environment variables
# (setup.bash). Then, it compiles the entire ROS workspace (ensuring there are
# no compilation errors), and runs all the tests. If any of the compilation/test
# phases fail, the build is marked as a failure.
#
# We handle two types of package dependencies specified in the package manifest:
#   - system dependencies that can be installed using `rosdep`, including other
#     ROS packages and system libraries. These dependencies must be known to
#     `rosdistro` and are installed using apt-get.
#   - package dependencies that must be checked out from source. These are handled by
#     `wstool`, and should be listed in a file named dependencies.rosinstall.
#

# There are environment variables you may want to change, such as ROS_DISTRO,
# ROSINSTALL_FILE, and the CATKIN_OPTIONS file.  See the README.md for more
# information on these flags, and
# https://docs.travis-ci.com/user/environment-variables/ for information about
# Travis environment variables in general.
#
# Author: Felix Duvallet <felixd@gmail.com>

# NOTE: The build lifecycle on Travis.ci is something like this:
#    before_install
#    install
#    before_script
#    script
#    after_success or after_failure
#    after_script
#    OPTIONAL before_deploy
#    OPTIONAL deploy
#    OPTIONAL after_deploy

################################################################################

sudo: required
cache:
  - apt

# Build all valid Ubuntu/ROS combinations available on Travis VMs.
language: generic
matrix:
  include:
  - name: "Focal noetic"
    dist: focal
    env: ROS_DISTRO=noetic

# Configuration variables. All variables are global now, but this can be used to
# trigger a build matrix for different ROS distributions if desired.
env:
  global:
    - CI_SOURCE_PATH=$(pwd)

################################################################################

# Install system dependencies, namely a very barebones ROS setup.
before_install:
  # ROS Noetic setup from http://wiki.ros.org/Installation/Ubuntu
  - sudo sh -c 'echo "deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main" > /etc/apt/sources.list.d/ros-latest.list'
  - sudo apt-key adv --keyserver 'hkp://keyserver.ubuntu.com:80' --recv-key C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654
  - sudo apt update
  # - sudo apt upgrade -y
  - sudo apt install ros-noetic-ros-base  # install barebones version of ROS instead of full desktop version
  - sudo apt install python3-rosdep python3-rosinstall python3-rosinstall-generator python3-wstool build-essential
  - sudo rosdep init
  - rosdep update
  # Install catkin_tools
  - wget http://packages.ros.org/ros.key -O - | sudo apt-key add -
  - sudo apt-get install python3-catkin-tools
  # Install catkin_tools dependencies
  - git clone https://github.com/catkin/catkin_tools.git
  - cd catkin_tools
  - pip3 install -r requirements.txt
  - cd ../
  - rm -rf catkin_tools

# Create a catkin workspace with the package under integration and install dependencies.
install:
  - cd ~
  - git clone https://github.com/Waterloo-Aquadrone/aquadrone2020_dev_workspace.git
  - cd aquadrone2020_dev_workspace/catkin_ws/src
  # Copy the version of the repo being tested to the workspace
  - mv $CI_SOURCE_PATH .

before_script:
  # Install Aquadrone pip_requirements
  - cd ~/aquadrone2020_dev_workspace/catkin_ws/src/aquadrone2020
  - pip3 install -r pip_requirements.txt
  - cd ../../

# Compile and test (mark the build as failed if any step fails). If the
# CATKIN_OPTIONS file exists, use it as an argument to catkin_make, for example
# to blacklist certain packages.
#
# NOTE on testing: `catkin_make run_tests` will show the output of the tests
# (gtest, nosetest, etc..) but always returns 0 (success) even if a test
# fails. Running `catkin_test_results` aggregates all the results and returns
# non-zero when a test fails (which notifies Travis the build failed).
script:
  - source /opt/ros/$ROS_DISTRO/setup.bash
  - catkin init
  - cd ~/aquadrone2020_dev_workspace/catkin_ws
  - catkin clean -y
  - catkin build
  # Run the tests, ensuring the path is set correctly.
  - source devel/setup.bash
  - catkin run_tests && catkin_test_results
