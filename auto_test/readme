to see how this works run "roslaunch ./catkin_ws/src/auto_test/launch/testcontroller_demo.launch"


FORMAT:

<launch>
    ## timeout of test in seconds; command rate is the frequency at which command signals get sent interplorated between initial and final values ##
    <arg name="timeout" default="5"/>
    <arg name="command_rate" default="1"/>

    <!-- LAUNCH ACTIVE ELEMENTS: -->
    <include file="$(find aquadrone_sim_demos)/launch/empty.launch"/>
    
    <node name="fake_news" pkg="testing" type="fake_data.py"/>
    
    ## add anything required to test ##
    
    <!--Do not change--><node name="test_controller" pkg="testing" type="testcontroller.py" output="screen" args="timeout:=$(arg timeout) command_rate:=$(arg command_rate)"><!--Do not change-->
    
        <!-- TEST SPECIFICATIONS: -->
        ## Obersvers are seperated by spaces. Individual format is just the topic to subscribe to followed by the literal python syntax required to access the oberserved message attribute. ##
        <param name="observers" value="/gazebo/model_states.pose[1].position.z"/><!--multiple observers can be seperated by a space-->
        ## Format (seperated by spaces): topic + topic type + literal python dictionary containing the info to store in the commanding message, with "!CTRL" indicating the controlled variable + inital and final control variable values (for linear interploration) ##
        <param name="commander" value="/aquadrone/fake/in std_msgs/Float32 {'data':'!CTRL'} [10,20]"/>
    </node>
</launch>
